generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  sessionToken  String?
  email         String?   @unique
  password      String?   // Required for email+password login
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  tasksAssigned Task[]    @relation("AssignedTasks")
  tasksCreated  Task[]    @relation("CreatedTasks")
  projects      Project[] @relation("UserProjects")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("UserProjects", fields: [email], references: [id])
  createdById String

  tasks       Task[]
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?
  status       String    @default("todo") // todo, in-progress, done
  priority     String?   // low, medium, high
  tags         String[]  // List of tags
  deadline     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  createdBy    User      @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String
}

// NextAuth Models (reused as-is)
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
